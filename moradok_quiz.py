import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import random
from groq import Groq
from datetime import datetime
import json
import hashlib
from typing import Dict

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(
    page_title="üß© ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å",
    page_icon="üß©",
    layout="wide"
)

# CSS ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
st.markdown("""
    <style>
    /* ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° */
    body {
        background-color: #f5f7fa;
        font-family: 'Kanit', sans-serif;
    }
    
    h1, h2, h3 {
        color: #2c3e50;
        font-weight: 600;
    }
    
    /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏Å‡∏£‡∏™‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏≤ */
    .progress-container {
        display: flex;
        justify-content: center;
        gap: 12px;
        margin: 25px 0;
        position: relative;
    }
    
    .progress-circle {
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    }
    
    .progress-circle.completed {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        transform: scale(0.95);
    }
    
    .progress-circle.current {
        background: linear-gradient(135deg, #2c3e50, #1a2530);
        color: white;
        transform: scale(1.15);
        box-shadow: 0 5px 15px rgba(0,0,0,0.25);
    }
    
    .progress-circle.upcoming {
        background: #e0e0e0;
        color: #666;
    }
    
    /* ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° */
    @keyframes slideIn {
        from { transform: translateX(50px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .quiz-card {
        animation: slideIn 0.6s ease-out;
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        border-left: 5px solid #2c3e50;
    }
    
    .quiz-card h3 {
        color: #2c3e50;
        margin-bottom: 15px;
    }
    
    .quiz-card p {
        color: #34495e;
        font-size: 1.1rem;
        line-height: 1.6;
    }
    
    .result-card {
        animation: fadeIn 0.8s ease-out;
        background: white;
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        border-left: 5px solid #4CAF50;
    }
    
    .result-card h2 {
        color: #2c3e50;
        margin-bottom: 10px;
    }
    
    .result-card h3 {
        color: #34495e;
        margin-bottom: 15px;
    }
    
    .result-card h4 {
        color: #2c3e50;
        margin-bottom: 10px;
    }
    
    .result-card p, .result-card li {
        color: #34495e;
        font-size: 1.1rem;
        line-height: 1.6;
    }
    
    .dimensional-highlight {
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 10px;
        background: #f8f9fa;
        border-left: 4px solid #3498db;
        transition: all 0.3s ease;
    }
    
    .dimensional-highlight h4 {
        color: #2c3e50;
        margin-bottom: 8px;
    }
    
    .dimensional-highlight p, .dimensional-highlight li {
        color: #34495e;
        font-size: 1.1rem;
        line-height: 1.6;
    }
    
    .profile-highlight {
        animation: pulse 2s infinite;
        padding: 15px;
        background: linear-gradient(135deg, #f9f9f9, #f2f2f2);
        border-radius: 10px;
        margin: 15px 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }
    
    .profile-highlight h4 {
        color: #2c3e50;
        margin-bottom: 10px;
    }
    
    .profile-highlight li {
        color: #34495e;
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 5px;
    }
    
    /* ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö */
    .stButton button {
        transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
        border-radius: 8px !important;
        padding: 12px 20px !important;
        font-weight: 500 !important;
        box-shadow: 0 3px 10px rgba(0,0,0,0.08) !important;
        border: none !important;
        margin-bottom: 12px !important;
        text-align: left !important;
        font-size: 1.05rem !important;
    }
    
    .stButton button:hover {
        transform: translateY(-3px) !important;
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    
    /* ‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü */
    .dimensional-highlight:hover {
        background: #eef2f7;
        transform: translateX(5px);
    }
    
    /* ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.03); }
        100% { transform: scale(1); }
    }
    
    /* ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: white;
        border-radius: 4px 4px 0 0;
        border: none;
        padding: 10px 20px;
        color: #2c3e50;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #2c3e50 !important;
        color: white !important;
    }
    </style>
    
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API Key
if "api_key" not in st.session_state:
    st.session_state.api_key = None

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô API Key
if st.session_state.api_key is None:
    st.sidebar.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    api_key = st.sidebar.text_input("‡∏õ‡πâ‡∏≠‡∏ô GROQ API Key (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)", type="password")
    if api_key:
        st.session_state.api_key = api_key
        st.sidebar.success("API Key ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß!")
    else:
        st.sidebar.info("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô API Key ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
else:
    api_key = st.session_state.api_key

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô session state
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "answers" not in st.session_state:
    st.session_state.answers = []
if "quiz_completed" not in st.session_state:
    st.session_state.quiz_completed = False
if "results" not in st.session_state:
    st.session_state.results = {}
if "user_profile" not in st.session_state:
    st.session_state.user_profile = {}
if "question_order" not in st.session_state:
    st.session_state.question_order = []
if "user_id" not in st.session_state:
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    current_time = datetime.now().strftime("%Y%m%d%H%M%S") + str(random.randint(1000, 9999))
    st.session_state.user_id = hashlib.md5(current_time.encode()).hexdigest()[:8]

# ‡∏Ñ‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
questions_pool = [
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ä‡∏¥‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        ],
        "dimension": "Marketing Performance",
        "weight": 1.0
    },
    {
        "question": "‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°?",
        "options": [
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏µ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏î‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"
        ],
        "dimension": "Identity Uniqueness",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
        ],
        "dimension": "Competitive Advantage",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÅ‡∏ú‡∏ô",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏ï‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡πÅ‡∏õ‡∏•‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏Å‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤"
        ],
        "dimension": "Networking Capability",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡∏Å‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÄ‡∏™‡∏°‡∏≠",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏±‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏á"
        ],
        "dimension": "Entrepreneurial Marketing",
        "weight": 1.0
    },
    {
        "question": "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": [
            "‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà",
            "‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà",
            "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥",
            "‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÑ‡∏ß‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"
        ],
        "dimension": "Marketing Performance",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤ (value proposition) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
            "‡πÄ‡∏ô‡πâ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î",
            "‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà"
        ],
        "dimension": "Identity Uniqueness",
        "weight": 1.0
    },
    {
        "question": "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô",
            "‡πÄ‡∏ô‡πâ‡∏ô‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏•‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏Å",
            "‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á",
            "‡∏£‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"
        ],
        "dimension": "Competitive Advantage",
        "weight": 1.0
    },
    {
        "question": "‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å - ‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏™‡∏°‡∏≠",
            "‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏≤‡∏ß - ‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞",
            "‡∏ô‡πâ‡∏≠‡∏¢ - ‡∏ú‡∏°/‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"
        ],
        "dimension": "Networking Capability",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏î‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•",
            "‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô",
            "‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠",
            "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ï‡∏•‡∏≤‡∏î"
        ],
        "dimension": "Entrepreneurial Marketing",
        "weight": 1.0
    },
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏°‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
    {
        "question": "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á",
            "‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
            "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥",
            "‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö"
        ],
        "dimension": "Entrepreneurial Marketing",
        "weight": 1.2  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à?",
        "options": [
            "‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤",
            "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
            "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ",
            "‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á"
        ],
        "dimension": "Competitive Advantage",
        "weight": 1.1
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô?",
        "options": [
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡∏Å‡∏±‡∏ô",
            "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        ],
        "dimension": "Identity Uniqueness",
        "weight": 1.1
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏ß‡∏á‡∏Å‡∏≤‡∏£",
            "‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥",
            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤",
            "‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ï‡∏•‡∏≤‡∏î"
        ],
        "dimension": "Marketing Performance",
        "weight": 1.2
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß?",
        "options": [
            "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö loyalty program ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©",
            "‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢",
            "‡∏°‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™",
            "‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ"
        ],
        "dimension": "Networking Capability",
        "weight": 1.2
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö",
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
            "‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ",
            "‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ"
        ],
        "dimension": "Entrepreneurial Marketing",
        "weight": 1.1
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô",
            "‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
            "‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ô‡∏µ‡∏õ‡∏£‡∏∞‡∏ô‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ",
            "‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        ],
        "dimension": "Identity Uniqueness",
        "weight": 1.0
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI"
        ],
        "dimension": "Identity Uniqueness",
        "weight": 1.3
    },
    {
        "question": "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡∏°‡πà ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à",
            "‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î",
            "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤",
            "‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"
        ],
        "dimension": "Entrepreneurial Marketing",
        "weight": 1.2
    },
    {
        "question": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏°‡∏ó‡∏∏‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "options": [
            "‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏ö",
            "‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á",
            "‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"
        ],
        "dimension": "Competitive Advantage",
        "weight": 1.1
    }
]

# ‡∏ä‡∏∏‡∏î‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
business_personalities = {
    "Strategic Thinker": {
        "color": "#3498db",  # blue
        "thai_name": "‡∏ô‡∏±‡∏Å‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå",
        "description": "‡∏Ñ‡∏¥‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏î‡∏µ",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å",
            "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
            "‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ö‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.8,
            "Competitive Advantage": 0.9,
            "Identity Uniqueness": 0.7,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.7
        }
    },
    "Visionary Creator": {
        "color": "#9b59b6",  # purple
        "thai_name": "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå",
        "description": "‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡πâ‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ï‡πà‡∏≤‡∏á",
        "strengths": [
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå",
            "‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.7,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.9,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.8
        }
    },
    "Relationship Builder": {
        "color": "#2ecc71",  # green
        "thai_name": "‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
        "description": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏ô‡∏ò‡∏°‡∏¥‡∏ï‡∏£",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏à‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.6,
            "Competitive Advantage": 0.7,
            "Identity Uniqueness": 0.7,
            "Networking Capability": 0.9,
            "Entrepreneurial Marketing": 0.6
        }
    },
    "Data-Driven Marketer": {
        "color": "#e67e22",  # orange
        "thai_name": "‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "description": "‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î",
            "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á",
            "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö A/B"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.9,
            "Competitive Advantage": 0.7,
            "Identity Uniqueness": 0.6,
            "Networking Capability": 0.5,
            "Entrepreneurial Marketing": 0.7
        }
    },
    "Agile Experimenter": {
        "color": "#e74c3c",  # red
        "thai_name": "‡∏ô‡∏±‡∏Å‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏±‡∏ß",
        "description": "‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡πá‡∏ß ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß",
            "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà",
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.7,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.7,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.9
        }
    },
    "Brand Architect": {
        "color": "#1abc9c",  # teal
        "thai_name": "‡∏™‡∏ñ‡∏≤‡∏õ‡∏ô‡∏¥‡∏Å‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå",
        "description": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á (Storytelling)",
            "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏±‡∏Å‡∏î‡∏µ‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.8,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.9,
            "Networking Capability": 0.7,
            "Entrepreneurial Marketing": 0.7
        }
    },
    "Community Catalyst": {
        "color": "#ff9ff3",  # pink
        "thai_name": "‡∏ú‡∏π‡πâ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏¢‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
        "description": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.6,
            "Competitive Advantage": 0.7,
            "Identity Uniqueness": 0.8,
            "Networking Capability": 0.9,
            "Entrepreneurial Marketing": 0.7
        }
    },
    "Innovation Leader": {
        "color": "#5f27cd",  # indigo
        "thai_name": "‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°",
        "description": "‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏ö",
            "‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°",
            "‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.7,
            "Competitive Advantage": 0.9,
            "Identity Uniqueness": 0.8,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.8
        }
    },
    "Growth Hacker": {
        "color": "#feca57",  # amber
        "thai_name": "‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß",
        "description": "‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß",
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.9,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.7,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.8
        }
    },
    "Sustainability Champion": {
        "color": "#2ecc71",  # emerald
        "thai_name": "‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
        "description": "‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à ‡∏™‡∏±‡∏á‡∏Ñ‡∏° ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏£‡πà‡∏ß‡∏°"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.7,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.8,
            "Networking Capability": 0.7,
            "Entrepreneurial Marketing": 0.7
        }
    },
    "Digital Transformer": {
        "color": "#00cec9",  # cyan
        "thai_name": "‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏π‡πà‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
        "description": "‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏°‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
            "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏™‡∏π‡πà‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
            "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.8,
            "Competitive Advantage": 0.8,
            "Identity Uniqueness": 0.7,
            "Networking Capability": 0.6,
            "Entrepreneurial Marketing": 0.8
        }
    },
    "Customer Experience Designer": {
        "color": "#ff6b6b",  # rose
        "thai_name": "‡∏ô‡∏±‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
        "description": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™",
        "strengths": [
            "‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
            "‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à",
            "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
        ],
        "dimension_affinity": {
            "Marketing Performance": 0.8,
            "Competitive Advantage": 0.7,
            "Identity Uniqueness": 0.8,
            "Networking Capability": 0.7,
            "Entrepreneurial Marketing": 0.7
        }
    }
}

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Moradok
moradok_questions = [
    {
        "question": "Moradok ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": [
            "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏£‡∏î‡∏Å‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
            "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
            "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
            "‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∏‡∏°‡∏ä‡∏ô"
        ],
        "correct": 0,
        "explanation": "Moradok ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏∏‡πà‡∏á‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏£‡∏î‡∏Å‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏Ñ‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏à‡πÉ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏°‡∏£‡∏î‡∏Å‡∏ä‡∏∏‡∏°‡∏ä‡∏ô ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô"
    },
    {
        "question": "Moradok ‡∏°‡∏µ‡∏Å‡∏µ‡πà‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°?",
        "options": [
            "2 ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å",
            "3 ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å",
            "4 ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å",
            "5 ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å"
        ],
        "correct": 1,
        "explanation": "Moradok ‡∏°‡∏µ 3 ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏° ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà 1) Your Idea (‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î) 2) Your Action (‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤) ‡πÅ‡∏•‡∏∞ 3) Your Fund (‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏ó‡∏∏‡∏ô) ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô"
    },
    {
        "question": "‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å 'Your Idea' ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": [
            "‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡πÄ‡∏á‡∏¥‡∏ô",
            "‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏£‡∏î‡∏Å",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
            "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"
        ],
        "correct": 1,
        "explanation": "‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å 'Your Idea' ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏£‡∏î‡∏Å ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏£‡∏î‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡πÜ"
    },
    {
        "question": "Moradok Srangsan (‡∏°‡∏£‡∏î‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå) ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": [
            "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏£‡∏î‡∏Å‡∏ó‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°",
            "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°",
            "‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
            "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ"
        ],
        "correct": 0,
        "explanation": "Moradok Srangsan ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏£‡∏î‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏£‡∏î‡∏Å‡∏ó‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à"
    },
    {
        "question": "Moradok Baengpan (‡∏°‡∏£‡∏î‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô) ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£?",
        "options": [
            "‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ",
            "‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∏‡∏°‡∏ä‡∏ô",
            "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
            "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå"
        ],
        "correct": 0,
        "explanation": "Moradok Baengpan ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏£‡∏î‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô"
    }
]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
def get_random_questions():
    if "question_order" not in st.session_state or len(st.session_state.question_order) == 0:
        # ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 10-30 ‡∏Ç‡πâ‡∏≠
        num_questions = random.randint(10, 30)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥
        dimensions = ["Marketing Performance", "Identity Uniqueness", "Competitive Advantage", 
                    "Networking Capability", "Entrepreneurial Marketing"]
        questions_by_dimension = {dim: [] for dim in dimensions}
        
        for q in questions_pool:
            questions_by_dimension[q["dimension"]].append(q)
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
        selected_questions = []
        questions_per_dimension = max(1, num_questions // len(dimensions))
        
        for dim in dimensions:
            dim_questions = questions_by_dimension[dim]
            if len(dim_questions) > questions_per_dimension:
                selected_questions.extend(random.sample(dim_questions, questions_per_dimension))
            else:
                selected_questions.extend(dim_questions)
        
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        remaining = num_questions - len(selected_questions)
        if remaining > 0:
            extra_questions = [q for q in questions_pool if q not in selected_questions]
            if len(extra_questions) > remaining:
                selected_questions.extend(random.sample(extra_questions, remaining))
            else:
                selected_questions.extend(extra_questions)
        
        # ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        random.shuffle(selected_questions)
        st.session_state.question_order = selected_questions
    
    return st.session_state.question_order

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
def calculate_results():
    dimension_scores = {
        "Marketing Performance": 0,
        "Identity Uniqueness": 0,
        "Competitive Advantage": 0,
        "Networking Capability": 0,
        "Entrepreneurial Marketing": 0
    }
    dimension_counts = {dim: 0 for dim in dimension_scores.keys()}
    
    for i, answer in enumerate(st.session_state.answers):
        question = st.session_state.question_order[i]
        dimension = question["dimension"]
        weight = question["weight"]
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö (0-3)
        answer_score = answer / (len(question["options"]) - 1)
        dimension_scores[dimension] += answer_score * weight
        dimension_counts[dimension] += weight
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥
    for dim in dimension_scores:
        if dimension_counts[dim] > 0:
            dimension_scores[dim] = dimension_scores[dim] / dimension_counts[dim]
    
    # ‡∏´‡∏≤‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    personality_scores = {}
    for personality, data in business_personalities.items():
        score = 0
        for dim, affinity in data["dimension_affinity"].items():
            score += dimension_scores[dim] * affinity
        personality_scores[personality] = score / len(data["dimension_affinity"])
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    sorted_personalities = sorted(personality_scores.items(), key=lambda x: x[1], reverse=True)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    st.session_state.results = {
        "dimension_scores": dimension_scores,
        "personality_scores": personality_scores,
        "sorted_personalities": sorted_personalities,
        "primary_personality": sorted_personalities[0][0],
        "secondary_personality": sorted_personalities[1][0] if len(sorted_personalities) > 1 else None,
        "tertiary_personality": sorted_personalities[2][0] if len(sorted_personalities) > 2 else None
    }

def analyze_dimension_with_llm(dimension_name: str, score: float, personality: Dict) -> str:
    """Analyze a dimension using LLM for deeper insights"""
    try:
        if not st.session_state.get('api_key'):
            # Fallback analysis when no API key is available
            fallback_analysis = {
                "Marketing Performance": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
                "Identity Uniqueness": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô",
                "Competitive Advantage": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á",
                "Networking Capability": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
                "Entrepreneurial Marketing": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÜ"
            }
            return fallback_analysis.get(dimension_name, "")
            
        client = groq.Groq(api_key=st.session_state.api_key)
        
        prompt = f"""
        You are a business strategy expert analyzing a business personality assessment.
        Dimension: {dimension_name}
        Score: {score}
        Personality Type: {personality['thai_name']} ({personality['description']})
        
        Please provide:
        1. A brief analysis of what this score means in the context of this personality type
        2. 2-3 specific strengths this combination suggests
        3. 1-2 potential areas for growth
        4. A practical recommendation for leveraging this dimension
        
        Keep the response concise and actionable.
        """
        
        response = client.chat.completions.create(
            model="mixtral-8x7b-32768",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=500
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error in LLM analysis: {str(e)}")
        return ""

def analyze_personality_with_llm(personality: Dict, scores: Dict[str, float]) -> str:
    """Analyze the overall personality type using LLM for deeper insights"""
    try:
        if not st.session_state.get('api_key'):
            # Fallback analysis when no API key is available
            return f"""
            ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û {personality['thai_name']} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {personality['description']}
            
            ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
            - {personality['strengths'][0]}
            - {personality['strengths'][1]}
            - {personality['strengths'][2]}
            
            ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:
            1. ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£
            2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            3. ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            """
            
        client = groq.Groq(api_key=st.session_state.api_key)
        
        prompt = f"""
        You are a business strategy expert analyzing a business personality assessment.
        Personality Type: {personality['thai_name']} ({personality['description']})
        Dimension Scores: {json.dumps(scores, indent=2)}
        
        Please provide:
        1. A comprehensive analysis of how this personality type's strengths align with their dimension scores
        2. 2-3 unique business opportunities this combination suggests
        3. Potential challenges and how to address them
        4. Specific recommendations for business growth and development
        
        Keep the response focused on practical business applications.
        """
        
        response = client.chat.completions.create(
            model="mixtral-8x7b-32768",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=800
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error in LLM analysis: {str(e)}")
        return ""

def show_results(scores: Dict[str, float], personality: Dict):
    """Display quiz results with enhanced LLM analysis"""
    st.title("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à")
    
    # Display personality type
    st.markdown(f"""
    <div class="result-card" style="border-color: {personality['color']};">
        <h2>‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠</h2>
        <h3 style="color: {personality['color']};">{personality['thai_name']}</h3>
        <p>{personality['description']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Display strengths
    st.markdown("""
    <div class="result-card">
        <h3>‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
        <ul>
    """, unsafe_allow_html=True)
    for strength in personality['strengths']:
        st.markdown(f"<li>{strength}</li>", unsafe_allow_html=True)
    st.markdown("</ul></div>", unsafe_allow_html=True)
    
    # Display dimension scores with LLM analysis
    st.markdown("""
    <div class="result-card">
        <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥</h3>
    """, unsafe_allow_html=True)
    
    for dimension, score in scores.items():
        st.markdown(f"""
        <div class="dimensional-highlight">
            <h4>{dimension}</h4>
            <div class="score-bar">
                <div class="score-fill" style="width: {score * 100}%; background-color: {personality['color']};"></div>
                <span class="score-text">{score:.2f}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Add LLM analysis for each dimension
        llm_analysis = analyze_dimension_with_llm(dimension, score, personality)
        if llm_analysis:
            st.markdown(f"""
            <div class="llm-insight">
                <h4>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h4>
                <p>{llm_analysis}</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Add overall personality analysis from LLM
    llm_personality_analysis = analyze_personality_with_llm(personality, scores)
    if llm_personality_analysis:
        st.markdown(f"""
        <div class="result-card">
            <h3>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h3>
            <p>{llm_personality_analysis}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Add CSS for new elements
    st.markdown("""
    <style>
    .llm-insight {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        border-left: 4px solid #6c757d;
    }
    .llm-insight h4 {
        color: #495057;
        margin-top: 0;
    }
    .llm-insight p {
        color: #212529;
        line-height: 1.6;
    }
    </style>
    """, unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û
def show_results():
    st.title("üîç ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö Moradok")
    st.write("")
    
    results = st.session_state.results
    primary_personality = results["primary_personality"]
    primary_data = business_personalities[primary_personality]
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
    with st.container():
        st.markdown(f"""
        <div class="result-card">
            <h2 style="color: {primary_data['color']};">{primary_data['thai_name']}</h2>
            <h3>{primary_data['description']}</h3>
            <div class="profile-highlight">
                <h4>üîπ ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</h4>
                <ul>
                    {''.join([f'<li>{strength}</li>' for strength in primary_data['strengths']])}
                </ul>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á
    if results["secondary_personality"]:
        secondary_data = business_personalities[results["secondary_personality"]]
        st.markdown(f"""
        <div class="result-card" style="margin-top: 20px;">
            <h3 style="color: {secondary_data['color']};">‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á: {secondary_data['thai_name']}</h3>
            <p>{secondary_data['description']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏°‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
    st.subheader("üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    fig = go.Figure()
    
    dimensions = list(results["dimension_scores"].keys())
    scores = [results["dimension_scores"][dim] * 100 for dim in dimensions]
    
    fig.add_trace(go.Bar(
        x=dimensions,
        y=scores,
        marker_color=['#3498db', '#9b59b6', '#2ecc71', '#e74c3c', '#f39c12'],
        text=[f"{score:.0f}%" for score in scores],
        textposition='auto'
    ))
    
    fig.update_layout(
        yaxis=dict(range=[0, 100], title="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%)"),
        xaxis=dict(title="‡∏°‡∏¥‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"),
        height=400,
        margin=dict(l=50, r=50, b=100, t=50, pad=4)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    st.write("")
    st.write("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞:")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üß© ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Moradok"):
            st.session_state.quiz_selection = "moradok"
            st.session_state.moradok_completed = False
            st.session_state.moradok_current_question = 0
            st.session_state.moradok_answers = []
            st.rerun()
    with col2:
        if st.button("üîÑ ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà"):
            st.session_state.quiz_completed = False
            st.session_state.current_question = 0
            st.session_state.answers = []
            st.session_state.results = {}
            st.session_state.user_profile = {}
            st.session_state.question_order = []
            st.rerun()
    with col3:
        if st.button("üè† ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"):
            st.session_state.quiz_selection = None
            st.session_state.quiz_completed = False
            st.session_state.current_question = 0
            st.session_state.answers = []
            st.session_state.results = {}
            st.session_state.user_profile = {}
            st.session_state.question_order = []
            st.rerun()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Moradok
def show_moradok_quiz():
    st.title("üß© ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Moradok")
    st.write("‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° Moradok ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")
    
    # Initialize all required session state variables
    if "moradok_answers" not in st.session_state:
        st.session_state.moradok_answers = []
    if "moradok_current_question" not in st.session_state:
        st.session_state.moradok_current_question = 0
    if "moradok_completed" not in st.session_state:
        st.session_state.moradok_completed = False
    if "show_explanation" not in st.session_state:
        st.session_state.show_explanation = False
    
    if st.session_state.moradok_current_question < len(moradok_questions):
        question = moradok_questions[st.session_state.moradok_current_question]
        
        st.markdown(f"""
        <div class="quiz-card">
            <h3>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {st.session_state.moradok_current_question + 1}/{len(moradok_questions)}</h3>
            <p>{question['question']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.session_state.show_explanation:
            st.markdown(f"""
            <div class="result-card" style="margin-top: 20px;">
                <h4>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</h4>
                <p>{question['explanation']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("‡∏ï‡πà‡∏≠‡πÑ‡∏õ", key="next_question"):
                st.session_state.show_explanation = False
                st.session_state.moradok_current_question += 1
                if st.session_state.moradok_current_question == len(moradok_questions):
                    st.session_state.moradok_completed = True
                st.rerun()
        else:
            for i, option in enumerate(question['options']):
                if st.button(option, key=f"moradok_option_{i}"):
                    st.session_state.moradok_answers.append(i)
                    st.session_state.show_explanation = True
                    st.rerun()
    else:
        show_moradok_results()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Moradok
def show_moradok_results():
    st.title("üéâ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Moradok")
    
    correct_answers = sum(1 for i, answer in enumerate(st.session_state.moradok_answers) 
                         if answer == moradok_questions[i]['correct'])
    score = (correct_answers / len(moradok_questions)) * 100
    
    st.markdown(f"""
    <div class="result-card">
        <h2>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {score:.0f}%</h2>
        <p>‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å {correct_answers} ‡∏à‡∏≤‡∏Å {len(moradok_questions)} ‡∏Ç‡πâ‡∏≠</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.write("")
    st.write("‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Moradok!")
    st.write("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞:")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üåê ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Moradok"):
            st.markdown("[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà Moradok.co](https://moradok.co)")
    with col2:
        if st.button("üß© ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"):
            st.session_state.quiz_selection = "personality"
            st.session_state.quiz_completed = False
            st.session_state.current_question = 0
            st.session_state.answers = []
            st.session_state.results = {}
            st.session_state.user_profile = {}
            st.session_state.question_order = []
            st.rerun()

def analyze_question_response_with_llm(question: str, answer: str, dimension: str) -> str:
    """Analyze user's response to a specific question using LLM"""
    try:
        if not st.session_state.get('api_key'):
            return ""
            
        client = groq.Groq(api_key=st.session_state.api_key)
        
        prompt = f"""
        You are a business psychology expert analyzing a quiz response.
        Question: {question}
        User's Answer: {answer}
        Dimension: {dimension}
        
        Please provide:
        1. A brief analysis of what this answer reveals about the user's mindset
        2. 1-2 key personality traits this response suggests
        3. How this aligns with the dimension being assessed
        
        Keep the response concise and insightful.
        """
        
        response = client.chat.completions.create(
            model="mixtral-8x7b-32768",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=300
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error in LLM analysis: {str(e)}")
        return ""

def match_moradok_solutions(personality: Dict, scores: Dict[str, float]) -> str:
    """Match user's personality and scores with Moradok solutions"""
    try:
        if not st.session_state.get('api_key'):
            # Fallback matching when no API key is available
            return f"""
            ‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô Moradok ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì:
            
            1. ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å Your Idea:
            - ‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏£‡∏î‡∏Å
            - ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡πÜ
            
            2. ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å Your Action:
            - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏£‡∏î‡∏Å
            - ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏™‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
            
            3. ‡πÄ‡∏™‡∏≤‡∏´‡∏•‡∏±‡∏Å Your Fund:
            - ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡∏°‡∏£‡∏î‡∏Å
            - ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏°‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            
            ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:
            - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ {personality['strengths'][0]} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            - ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°
            """
            
        client = groq.Groq(api_key=st.session_state.api_key)
        
        prompt = f"""
        You are a Moradok platform expert matching user profiles with appropriate solutions.
        Personality Type: {personality['thai_name']} ({personality['description']})
        Dimension Scores: {json.dumps(scores, indent=2)}
        
        Based on the user's personality and scores, suggest:
        1. Which Moradok engagement pillar (Your Idea, Your Action, Your Fund) best matches their profile
        2. Specific Moradok solutions or features they might find valuable
        3. How they can contribute to heritage preservation based on their strengths
        4. Potential community roles they could take on
        
        Keep the response focused on practical Moradok applications.
        """
        
        response = client.chat.completions.create(
            model="mixtral-8x7b-32768",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=600
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error in Moradok matching: {str(e)}")
        return ""

def show_quiz():
    st.title("üß© ‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à")
    st.write("‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô 5 ‡∏°‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å")
    
    questions = get_random_questions()
    total_questions = len(questions)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á progress circles
    progress_html = '<div class="progress-container">'
    for i in range(total_questions):
        status = "completed" if i < st.session_state.current_question else "current" if i == st.session_state.current_question else "upcoming"
        progress_html += f'<div class="progress-circle {status}">{i+1}</div>'
    progress_html += '</div>'
    st.markdown(progress_html, unsafe_allow_html=True)
    
    if st.session_state.current_question < total_questions:
        question = questions[st.session_state.current_question]
        
        st.markdown(f"""
        <div class="quiz-card">
            <h3>‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {st.session_state.current_question + 1}/{total_questions}</h3>
            <p>{question['question']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        for i, option in enumerate(question['options']):
            if st.button(option, key=f"option_{i}"):
                st.session_state.answers.append(i)
                
                # Add LLM analysis for this response
                if st.session_state.get('api_key'):
                    analysis = analyze_question_response_with_llm(
                        question['question'],
                        option,
                        question['dimension']
                    )
                    if analysis:
                        st.markdown(f"""
                        <div class="llm-insight">
                            <h4>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h4>
                            <p>{analysis}</p>
                        </div>
                        """, unsafe_allow_html=True)
                
                st.session_state.current_question += 1
                if st.session_state.current_question == total_questions:
                    st.session_state.quiz_completed = True
                    calculate_results()
                st.rerun()
    else:
        show_results()

def show_results(scores: Dict[str, float], personality: Dict):
    """Display quiz results with enhanced LLM analysis and Moradok matching"""
    st.title("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à")
    
    # Create two columns for personality info and radar chart
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # Display personality type
        st.markdown(f"""
        <div class="result-card" style="border-color: {personality['color']};">
            <h2>‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠</h2>
            <h3 style="color: {personality['color']};">{personality['thai_name']}</h3>
            <p>{personality['description']}</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Display strengths
        st.markdown("""
        <div class="result-card">
            <h3>‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
            <ul>
        """, unsafe_allow_html=True)
        for strength in personality['strengths']:
            st.markdown(f"<li>{strength}</li>", unsafe_allow_html=True)
        st.markdown("</ul></div>", unsafe_allow_html=True)
        
        # Add overall personality analysis from LLM
        llm_personality_analysis = analyze_personality_with_llm(personality, scores)
        if llm_personality_analysis:
            st.markdown(f"""
            <div class="result-card">
                <h3>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h3>
                <p>{llm_personality_analysis}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Add Moradok solution matching
        moradok_matching = match_moradok_solutions(personality, scores)
        if moradok_matching:
            st.markdown(f"""
            <div class="result-card" style="border-color: #4CAF50;">
                <h3>üéØ ‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô Moradok ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì</h3>
                <p>{moradok_matching}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        # Create radar chart for dimension scores
        st.markdown("""
        <div class="result-card">
            <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥</h3>
        """, unsafe_allow_html=True)
        
        # Prepare data for radar chart
        dimensions = list(scores.keys())
        scores_values = [scores[dim] * 100 for dim in dimensions]  # Convert to percentage
        
        # Create radar chart
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=scores_values,
            theta=dimensions,
            fill='toself',
            name='‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            line_color=personality['color']
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100],
                    tickfont=dict(size=12),
                    tickangle=0
                ),
                angularaxis=dict(
                    tickfont=dict(size=14)
                )
            ),
            showlegend=False,
            height=400,
            margin=dict(l=50, r=50, b=50, t=50, pad=4),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Display detailed scores and LLM analysis for each dimension
        st.markdown("""
        <div class="result-card">
            <h3>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏¥‡∏ï‡∏¥</h3>
        """, unsafe_allow_html=True)
        
        for dimension, score in scores.items():
            st.markdown(f"""
            <div class="dimensional-highlight">
                <h4>{dimension}</h4>
                <div class="score-bar">
                    <div class="score-fill" style="width: {score * 100}%; background-color: {personality['color']};"></div>
                    <span class="score-text">{score:.2f}</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Add LLM analysis for each dimension
            llm_analysis = analyze_dimension_with_llm(dimension, score, personality)
            if llm_analysis:
                st.markdown(f"""
                <div class="llm-insight">
                    <h4>‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å</h4>
                    <p>{llm_analysis}</p>
                </div>
                """, unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Add navigation buttons
    st.markdown("""
    <div class="navigation-buttons">
        <div class="button-container">
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", key="back_to_main"):
            st.session_state.quiz_selection = None
            st.session_state.personality_answers = {}
            st.session_state.personality_current_question = 0
            st.session_state.personality_completed = False
            st.rerun()
    
    with col2:
        if st.button("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Moradok Quiz", key="back_to_moradok"):
            st.session_state.quiz_selection = "moradok"
            st.session_state.moradok_answers = {}
            st.session_state.moradok_current_question = 0
            st.session_state.moradok_completed = False
            st.rerun()
    
    with col3:
        if st.button("‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà", key="retake_quiz"):
            st.session_state.personality_answers = {}
            st.session_state.personality_current_question = 0
            st.session_state.personality_completed = False
            st.rerun()
    
    st.markdown("""
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add CSS for new elements
    st.markdown("""
    <style>
    .navigation-buttons {
        margin-top: 30px;
        text-align: center;
    }
    .button-container {
        display: flex;
        justify-content: center;
        gap: 15px;
        flex-wrap: wrap;
    }
    .nav-button {
        background-color: #4CAF50;
        color: white;
        padding: 12px 24px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .nav-button:hover {
        background-color: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .nav-button:active {
        transform: translateY(0);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .llm-insight {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        border-left: 4px solid #6c757d;
    }
    .llm-insight h4 {
        color: #495057;
        margin-top: 0;
    }
    .llm-insight p {
        color: #212529;
        line-height: 1.6;
    }
    .score-bar {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
        margin: 10px 0;
        position: relative;
    }
    .score-fill {
        height: 100%;
        border-radius: 10px;
        transition: width 0.5s ease;
    }
    .score-text {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #fff;
        font-weight: bold;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }
    </style>
    """, unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
def show_quiz_selection():
    st.title("üß© ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° Moradok")
    st.write("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥:")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="quiz-card" style="text-align: center; padding: 20px;">
            <h3>‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Moradok</h3>
            <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° Moradok ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏°‡∏£‡∏î‡∏Å‡∏ä‡∏∏‡∏°‡∏ä‡∏ô</p>
        </div>
        """, unsafe_allow_html=True)
        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö Moradok", key="moradok_quiz"):
            st.session_state.quiz_selection = "moradok"
            st.session_state.moradok_completed = False
            st.session_state.moradok_current_question = 0
            st.session_state.moradok_answers = []
            st.rerun()
    
    with col2:
        st.markdown("""
        <div class="quiz-card" style="text-align: center; padding: 20px;">
            <h3>‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à</h3>
            <p>‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô 5 ‡∏°‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•</p>
        </div>
        """, unsafe_allow_html=True)
        if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û", key="personality_quiz"):
            st.session_state.quiz_selection = "personality"
            st.session_state.quiz_completed = False
            st.session_state.current_question = 0
            st.session_state.answers = []
            st.session_state.results = {}
            st.session_state.user_profile = {}
            st.session_state.question_order = []
            st.rerun()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
def main():
    if "quiz_selection" not in st.session_state:
        st.session_state.quiz_selection = None
    
    if st.session_state.quiz_selection is None:
        show_quiz_selection()
    elif st.session_state.quiz_selection == "moradok":
        if not st.session_state.moradok_completed:
            show_moradok_quiz()
        else:
            show_moradok_results()
    elif st.session_state.quiz_selection == "personality":
        if not st.session_state.quiz_completed:
            show_quiz()
        else:
            # Get the results from session state
            results = st.session_state.results
            primary_personality = results["primary_personality"]
            personality_data = business_personalities[primary_personality]
            
            # Call show_results with the required arguments
            show_results(results["dimension_scores"], personality_data)

if __name__ == "__main__":
    main()
